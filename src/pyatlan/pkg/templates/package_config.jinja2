from datetime import datetime
from pathlib import Path
from pydantic.v1 import BaseModel, BaseSettings, Field, validator
from pyatlan.model.assets import Connection
from pyatlan.pkg.models import ConnectorAndConnection
from pyatlan.pkg.utils import validate_connection, validate_multiselect, validate_connector_and_connection
from typing import Any, Optional, Union, Dict
import logging.config

PARENT = Path(__file__).parent
LOGGING_CONF = PARENT / "logging.conf"
if LOGGING_CONF.exists():
    logging.config.fileConfig(LOGGING_CONF)
LOGGER = logging.getLogger(__name__)

ENV = 'env'

class CustomConfig(BaseModel):
    """"""""
{%- for key, value in pkg.ui_config.properties.items() %}
    {{ value.ui.get_validator(key) }}
{%- endfor %}

class RuntimeConfig(BaseSettings):
    user_id:Optional[str] = Field(default="")
    agent:Optional[str] = Field(default="")
    agent_id:Optional[str] = Field(default="")
    agent_pkg:Optional[str] = Field(default="")
    agent_wfl:Optional[str] = Field(default="")
    custom_config:Optional[CustomConfig] = None

    class Config:
        fields = {
            'user_id': {
                ENV: 'ATLAN_USER_ID',
            },
            'agent': {
                ENV: 'X_ATLAN_AGENT'
            },
            'agent_id': {
                ENV: 'X_ATLAN_AGENT_ID'
            },
            'agent_pkg': {
                ENV: 'X_ATLAN_AGENT_PACKAGE_NAME'
            },
            'agent_wfl': {
                ENV: 'X_ATLAN_AGENT_WORKFLOW_ID'
            },
            'custom_config': {
                ENV: 'NESTED_CONFIG'
            }
        }
        @classmethod
        def parse_env_var(cls, field_name:str, raw_value:str)->Any:
            if field_name == 'custom_config':
                return CustomConfig.parse_raw(raw_value)
            return cls.json_loads(raw_value)

    @property
    def envars_as_dict(self) -> Dict[str, Any]:
        """
        :return dict: returns a dict of the environment variable names and values consumed by this RuntimeConfig.
        the name of an environment variable will be the key and the value will be the value. This is provided
        to facilitate testing
        """
        ret_val: Dict[str, Any] = {}
        for key, value in RuntimeConfig.Config.fields.items():
            if field_value := getattr(self, key):
                ret_val[value["env"]] = field_value.json()
        return ret_val
